{"version":3,"sources":["Components/Cards.js","Components/Cardlist.js","Components/Searchbox.js","Components/Errorboundary.js","Components/Scroll.js","Containers/App.js","action.js","constant.js","serviceWorker.js","reducer.js","index.js"],"names":["Cards","name","id","email","className","alt","src","Cardlist","robots","map","user","key","Searchbox","searchChange","onChange","type","placeholder","Errorboundary","props","state","haserror","error","info","this","setState","children","Component","Scroll","style","overflowY","border","height","App","onRequestRobots","searchField","onSearchChange","isPending","filterrobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","console","log","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4d56ab5f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Cards=({name,id,email})=>{\r\n\treturn(\r\n\t\t<div className='tc grow bg-light-green br3 pa3 ma3 dib bw2 shadow-5 w-20'>\r\n\t\t<img alt='Pic not Availble' src={`https://robohash.org/${id}?size=200x200`}/>\r\n\t\t<div className=\"f4\"><h2>{name}</h2>\r\n\t\t<p>{email}</p>\r\n\t\t</div></div>)\r\n}\r\nexport default Cards;","import React from 'react';\r\nimport Cards from './Cards';\r\n\r\nconst Cardlist=({robots})=>{\r\n\treturn(\r\n\t\t<div>\r\n\t\t{\r\n\t\t\trobots.map(user=>{return(<Cards key={user.id} name={user.name} id={user.id} email={user.email}/>)})\r\n\t\t}</div>)\r\n}\r\nexport default Cardlist;","import React from 'react';\r\n\r\nconst Searchbox=({searchChange})=>{\r\n\treturn(\r\n\t\t<div className='pa2 '><input onChange={searchChange} className=' tc f3 pa3 ba b--green bg-lightest-green' type='search' placeholder='Search Robots'/></div>)\r\n}\r\nexport default Searchbox;","import React,{ Component } from 'react';\r\n\r\nclass Errorboundary extends Component\r\n{\r\n\tconstructor(props)\r\n\t{\r\nsuper(props);\r\nthis.state={haserror:false}\r\n}\r\ncomponentDidCatch(error,info)\r\n{\r\n\tthis.setState({haserror:true})\r\n}\r\nrender()\r\n{\r\n\tif (this.state.haserror)\r\n\t{\r\n\t\treturn <h1>Thats Not Good</h1>\r\n\t}\r\n\t\treturn(this.props.children)\r\n\t\r\n}\r\n\r\n}\r\nexport default Errorboundary;","import React from 'react';\r\n\r\nconst Scroll=(props)=>\r\n{\r\n\treturn(<div style={{overflowY:'scroll',border:'5px dotted black',height:'1000px'}}>\r\n{props.children}\r\n\t\t</div>)\r\n\t\r\n}\r\nexport default Scroll;\r\n","import React,{ Component } from 'react';\nimport { connect } from 'react-redux';\nimport Cardlist from'../Components/Cardlist'\nimport Searchbox from '../Components//Searchbox';\nimport './App.css'\nimport Errorboundary from '../Components/Errorboundary';\nimport Scroll from '../Components/Scroll';\n\n\nimport { setSearchField,requestRobots } from '../action';\n\nconst mapStateToProps = state =>{\n\treturn{\n\tsearchField:state.searchRobots.searchField,\n\trobots:state.requestRobots.robots,\n\tisPending:state.requestRobots.isPending,\n\terror:state.requestRobots.error\n}\n}\n\t\n\nconst mapDispatchToProps = (dispatch) => {\n\treturn{\n\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n\tonRequestRobots:()=> dispatch(requestRobots())\n    }\n}\n\nclass App extends Component {\n\n\t\n\n\tcomponentDidMount()\n\t{\n\t\tthis.props.onRequestRobots();\n\t}\n\t\n\t render()\n\t {\n \tconst {searchField,onSearchChange,robots,isPending}=this.props;\n     const filterrobots=robots.filter(robot=>robot.name.toLowerCase().includes(searchField.toLowerCase()));\n    return isPending?<h1>loading</h1>:(\n      <div className='tc'>\n      <h3>RoboFriends</h3>\n      <Searchbox searchChange={onSearchChange}/> \n      <Scroll><Errorboundary><Cardlist robots={filterrobots}/></Errorboundary></Scroll></div>)\n   }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","import {changeSearchField, REQUEST_ROBOTS_PENDING,REQUEST_ROBOTS_SUCCESS,REQUEST_ROBOTS_FAILED} from './constant.js'\r\n\r\n\r\nexport const setSearchField = (text) => {\r\n\treturn{\r\n\r\n\t\r\n\ttype:changeSearchField,\r\n\tpayload:text\r\n}\r\n}\r\n\r\nexport const requestRobots=()=>(dispatch)=>{\r\n\tdispatch({type:REQUEST_ROBOTS_PENDING});\r\n\tfetch('https://jsonplaceholder.typicode.com/users').then(response=>response.json()).then(data=>dispatch({type:REQUEST_ROBOTS_SUCCESS,payload:data}))\r\n\t.catch(error=>dispatch({type:REQUEST_ROBOTS_FAILED,payload:error }))\r\n}\r\n\r\n\r\n","export const changeSearchField='changeSearchField';\r\nexport const REQUEST_ROBOTS_PENDING='REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS='REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED='REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {changeSearchField, REQUEST_ROBOTS_PENDING,REQUEST_ROBOTS_SUCCESS,REQUEST_ROBOTS_FAILED} from './constant.js'\r\n\r\nconst initialStateSearch={\r\n\tsearchField:''\r\n}\r\nexport const searchRobots=(state=initialStateSearch,action={}) => {\r\n\tconsole.log(action.type);\r\n\tswitch(action.type)\r\n\t{\r\ncase changeSearchField:\r\nreturn {...state,searchField:action.payload}\r\ndefault:\r\nreturn state;\r\n\t}\r\n}\r\nconst initialStateRobots={\r\nisPending:false,\r\nrobots:[],\r\nerror:''\r\n}\r\n\r\nexport const requestRobots=(state=initialStateRobots,action={}) => {\r\nswitch(action.type)\r\n{\r\n\tcase REQUEST_ROBOTS_PENDING:\r\n\treturn {...state,isPending:true}\r\n\tcase REQUEST_ROBOTS_SUCCESS:\r\n\treturn {...state,robots:action.payload,isPending:false}\r\n\tcase REQUEST_ROBOTS_FAILED:\r\n\treturn {...state,error:action.payload,isPending:false}\r\n\tdefault:\r\n\treturn state;\r\n}\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {createLogger} from 'redux-logger';\nimport './index.css';\nimport App from './Containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport { Provider } from 'react-redux';\nimport { createStore,applyMiddleware,combineReducers} from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { searchRobots,requestRobots } from './reducer';\n\nconst logger=createLogger();\nconst rootReducer=combineReducers({searchRobots,requestRobots})\nconst store = createStore(rootReducer,applyMiddleware(thunkMiddleware,logger));\n\nReactDOM.render(<Provider store={store}><App/></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}